afterEvaluate { project ->
    def isAndroid = project.plugins.hasPlugin("com.android.library") || project.plugins.hasPlugin("com.android.application")
    def isAndroidComponent = project.plugins.hasPlugin("com.android.library")
    def isJava = project.plugins.hasPlugin("java-library")

    if (isAndroid || isJava) {
        setupModule(isAndroid, isAndroidComponent)
        setupCommonTasks(isAndroid)
        setupKsp(project)
        setupKapt(project)
    }
}

def setupModule(isAndroid, isAndroidComponent) {
    if (isAndroid) {
        kotlin {
            jvmToolchain {
                languageVersion.set(JavaLanguageVersion.of(11))
            }
        }
        android {
            compileSdk projectCompileSdk

            defaultConfig {
                minSdk projectMinSdk
                targetSdk projectTargetSdk
            }

            if (isAndroidComponent) {
                buildTypes.release.minifyEnabled false
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_11
                targetCompatibility JavaVersion.VERSION_11
            }

            kotlinOptions.freeCompilerArgs += [
                "-opt-in=kotlin.RequiresOptIn"
            ]

            lintOptions {
                checkDependencies true
                checkReleaseBuilds false
                ignoreTestSources true
                warningsAsErrors true
                disable = [
                    "GoogleAppIndexingWarning",
                    "GradleDependency",
                    "JavaPluginLanguageLevel"
                ]
            }

            testOptions {
                unitTests.all {
                    maxParallelForks = Runtime.runtime.availableProcessors() - 1
                }
            }
        }
    } else {
        kotlin {
            jvmToolchain {
                languageVersion.set(JavaLanguageVersion.of(11))
            }
        }

        compileKotlin.kotlinOptions.freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
        compileTestKotlin.kotlinOptions.freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"

        test {
            maxParallelForks = Runtime.runtime.availableProcessors() - 1
            maxHeapSize = "256m"
        }
    }
}

def setupCommonTasks(isAndroid) {
    if (isAndroid) {
        tasks.register("unitTest") { task ->
            task.dependsOn(testDebugUnitTest)
        }
    } else {
        tasks.register("unitTest") { task ->
            task.dependsOn(test)
        }
    }
}

// https://githubcom/google/ksp/issues/746
def setupKsp(project) {
    plugins.withId("com.google.devtools.ksp") {
        if (project.plugins.hasPlugin('com.android.application')) {
            setupKspSourceSets(android.applicationVariants)
        } else if (project.plugins.hasPlugin('com.android.library')) {
            setupKspSourceSets(android.libraryVariants)
        }
    }
}

def setupKspSourceSets(variants) {
    variants.all { variant ->
        def name = variant.name
        kotlin.sourceSets {
            getByName(name) {
                kotlin.srcDirs += ["$buildDir/generated/ksp/$name/kotlin"]
            }
        }
    }
}

// https://www.zacsweers.dev/kapts-hidden-test-costs/
def setupKapt(project) {
    if (project.name != "app") {
        tasks
            .matching { it.name.startsWith("kapt") && it.name.endsWith("TestKotlin") }
            .configureEach { it.enabled = false }
    }
}
